actual=testset$y
rmse=sqrt((sum((pred - actual)^2))/nrow(testset))
library(MASS)
pred_r<- predict(fit_red,testset)
fit_red<- stepAIC(trainset$y~.,data=trainset,family='gaussian')
fit_red<- stepAIC(fit)
pred_r<- predict(fit_red,testset)
rmse_r<- sqrt((sum((pred_r- actual)^2))/nrow(testset))
RMSE=RMSE+ c(rmse,rmse_r)
RMSE
mydata<- read.csv(file.choose())
reg_data<- read.table(file="http://users.stat.ufl.edu/~winner/data/japanemg.dat" , header = FALSE, sep = "" )
reg_data
reg_data<- read.table(file="http://users.stat.ufl.edu/~winner/data/muscle1.dat" , header = FALSE, sep = "" )
reg_data
colnames(reg_data)=c("Body Mass","Work Level", "Heat Output")
x1<- reg_data$`Body Mass`
x2<- reg_data$`Work Level`
y<- reg_data$`Heat Output`
dataset<- na.omit(data.frame(x1,x2,y))
n = nrow(dataset)
indexes = sample(n,n*(80/100))
trainset = dataset[indexes,]
testset = dataset[-indexes,]
dim(testset)
trainset.glm<- glm(y~.,trainset, family = 'binomial')
mydata<- read.csv(file.choose())
mydata
x1<- mydata$height
x2<- mydata$handLen
x3<- mydata$footLen
y<- mydata$gender
dataset<- na.omit(data.frame(x1,x2,x3,y))
n = nrow(dataset)
indexes = sample(n,n*(80/100))
trainset = dataset[indexes,]
testset = dataset[-indexes,]
dim(testset)
trainset.glm<- glm(y~.,trainset, family = 'binomial')
mydata<- read.csv(file.choose())
mydata
x1<- mydata$height
x2<- mydata$handLen
x3<- mydata$footLen
y<- mydata$gender
dataset<- na.omit(data.frame(x1,x2,x3,y))
n = nrow(dataset)
indexes = sample(n,n*(80/100))
trainset = dataset[indexes,]
testset = dataset[-indexes,]
dim(testset)
trainset.glm<- glm(y~.,trainset, family = 'binomial')
summary(trainset.glm)
res<- predict(trainset.glm,testset,type = response)
res<- predict(trainset.glm,testset,type = "response")
predictedvalues<- rep(0,length(res))
predictedvalues[res>0.5]=1
actual=testset[,4]
df<- data.frame(actual,predictedvalues)
df
confusion_matrix<- table(predictedvalues,actualvalues=testset[,4]-1)
confusion_matrix
confusion_matrix<- table(predictedvalues,actualvalues=testset[,4])
confusion_matrix
accuracy=mean(predictedvalues==testset[,4])
accuracy
mydata<- read.csv(file.choose())
mydata<- read.csv(file.choose())
mydata
x1<- mydata$height
x2<- mydata$handLen
x3<- mydata$footLen
y<- mydata$gender
table(y)
dataset<- na.omit(data.frame(x1,x2,x3,y))
fit.glm<- glm(y~., dataset, family = 'binomial')
summary(fit.glm)
acc<- 0
mc<- 1000
mydata<- read.csv(file.choose())
mydata
x1<- mydata$height
x2<- mydata$handLen
x3<- mydata$footLen
y<- mydata$gender
table(y)
dataset<- na.omit(data.frame(x1,x2,x3,y))
fit.glm<- glm(y~., dataset, family = 'binomial')
summary(fit.glm)
acc<- 0
mc<- 1000
for (i in 1:mc) {
n = nrow(dataset)
indexes = sample(n,n*(80/100))
trainset = dataset[indexes,]
testset = dataset[-indexes,]
#Fit The full model
actual=testset$y
fit.model<- glm(y~.,data=trainset,family = 'binomial')
summary(fit.model)
pred<- predict(fit.model,testset[1:3])
pred_am<- ifelse(pred>=0.5,1,0)
pred_am
table(actual)
table(pred_am)
confusion_matrix<- table(pred_am,actual)
acc<- acc + sum(confusion_matrix[row(confusion_matrix)==col(confusion_matrix)]/sum(confusion_matrix))
}
accuracy< acc/mc
accuracy
confusion_matrix
accuracy
summary(fit.glm)
confusion_matrix
accuracy
confusion_matrix
shiny::runApp('D:/Kunal/Assignments/Stats/CA1/GLM')
runApp('D:/Kunal/Assignments/Stats/CA1/GLM')
runApp('D:/Kunal/Assignments/Stats/CA1/GLM')
runApp('D:/Kunal/Assignments/Stats/CA1/GLM')
runApp('D:/Kunal/Assignments/Stats/CA1/GLM')
runApp('D:/Kunal/Assignments/Stats/CA1/GLM_1')
runApp('D:/Kunal/Assignments/Stats/CA1/GLM_1')
runApp('D:/Kunal/Assignments/Stats/CA1/GLM_1')
f
f<-data()
f
shiny::runApp('D:/Kunal/Assignments/Stats/CA1/GLM_1')
runApp('D:/Kunal/Assignments/Stats/CA1/GLM_1')
runApp('D:/Kunal/Assignments/Stats/CA1/GLM_1')
runApp('D:/Kunal/Assignments/Stats/CA1/GLM_1')
runApp('D:/Kunal/Assignments/Stats/CA1/GLM_1')
runApp('D:/Kunal/Assignments/Stats/CA1/GLM_1')
runApp('D:/Kunal/Assignments/Stats/CA1/GLM_1')
runApp('D:/Kunal/Assignments/Stats/CA1/GLM_1')
runApp('D:/Kunal/Assignments/Stats/CA1/GLM_1')
runApp('D:/Kunal/Assignments/Stats/CA1/GLM_1')
runApp('D:/Kunal/Assignments/Stats/CA1/GLM_1')
data1()
runApp('D:/Kunal/Assignments/Stats/CA1/GLM_1')
runApp('D:/Kunal/Assignments/Stats/CA1/GLM_1')
runApp('D:/Kunal/Assignments/Stats/CA1/GLM_1')
runApp('D:/Kunal/Assignments/Stats/CA1/GLM_1')
f<-data()
runApp('D:/Kunal/Assignments/Stats/CA1/GLM_1')
#H0: Gender and Voting preferences are independent.
#H1: Gender and Voting preferences are not independent.
install.packages("caret")
install.packages("caret")
library(caret)
test_survey<- data.frame("Yes"=c(200,250),
"No"=c(150,300),
"Cant Say"=c(50,50))
chisq.test(test_survey)
mydata<- read.csv("D:/Kunal/Assignments/Stats/CA2/stature_hand_foot.csv")
mydata
x1<- mydata$height
x2<- mydata$handLen
x3<- mydata$footLen
y<- mydata$gender
mydata
x1<- mydata$height
x2<- mydata$handLen
x3<- mydata$footLen
y<- mydata$gender
dataset<- na.omit(data.frame(x1,x2,x3,y))
n = nrow(dataset)
indexes = sample(n,n*(80/100))
trainset = dataset[indexes,]
testset = dataset[-indexes,]
dim(testset)
dim(testset)
dim(dataset)
dim(testset)
x1<- mydata$height
x2<- mydata$handLen
x3<- mydata$footLen
y<- mydata$gender
dim(testset)
dataset<- na.omit(data.frame(x1,x2,x3,y))
fit.glm<- glm(y~., dataset, family = 'binomial')
summary(fit.glm)
acc<- 0
mc<- 1000
for (i in 1:mc) {
n = nrow(dataset)
indexes = sample(n,n*(80/100))
trainset = dataset[indexes,]
testset = dataset[-indexes,]
#Fit The full model
actual=testset$y
fit.model<- glm(y~.,data=trainset,family = 'binomial')
summary(fit.model)
pred<- predict(fit.model,testset[1:3])
pred_am<- ifelse(pred>=0.5,1,0)
pred_am
table(actual)
table(pred_am)
confusion_matrix<- table(pred_am,actual)
acc<- acc + sum(confusion_matrix[row(confusion_matrix)==col(confusion_matrix)]/sum(confusion_matrix))
}
accuracy< acc/mc
confusion_matrix
accuracy
shinyApp(ui, server)
library(shiny)
library(shiny)
data("iris")
head(iris)
list = names(iris)
list
ui <- fluidPage(
#TAB FIVE
tabItem(tabName = "Generalised Linear Model",
h2("Using Iris Data Set for Regression Model"),
fluidPage(
sidebarLayout(
sidebarPanel(
selectInput("outcome", label = h3("Outcome"),
choices = list, selected = 1),
selectInput("indepvar", label = h3("Explanatory variable"),
choices = list, selected = 1)
),
mainPanel(
tabsetPanel(type = "tabs",
tabPanel("Scatterplot", plotOutput("scatterplot")), # Plot
tabPanel("Distribution", # Plots of distributions
fluidRow(
column(6, plotOutput("distribution1")),
column(6, plotOutput("distribution2")))
),
tabPanel("Model Summary", verbatimTextOutput("summary")), # Regression output
tabPanel("Data", DT::dataTableOutput('tbl')) # Data as datatable
)
)
))
)
)
server <- function(input,output){
# Scatterplot output
output$scatterplot <- renderPlot({
plot(iris[,input$indepvar], iris[,input$outcome], main="Scatterplot",
xlab=input$indepvar, ylab=input$outcome, pch=19)
abline(lm(iris[,input$outcome] ~ iris[,input$indepvar]), col="red")
lines(lowess(iris[,input$indepvar],iris[,input$outcome]), col="blue")
}, height=400)
# Histogram output var 1
output$distribution1 <- renderPlot({
hist(iris[,input$outcome], main="", xlab=input$outcome)
}, height=300, width=300)
# Histogram output var 2
output$distribution2 <- renderPlot({
hist(iris[,input$indepvar], main="", xlab=input$indepvar)
}, height=300, width=300)
# Regression output
output$summary <- renderPrint({
fit <- lm(iris[,input$outcome] ~ iris[,input$indepvar])
names(fit$coefficients) <- c("Intercept", input$var2)
summary(fit)
})
# Data output
output$tbl = DT::renderDataTable({
DT::datatable(iris, options = list(lengthChange = FALSE))
})
}
shinyApp(ui, server)
library(shiny)
data("iris")
head(iris)
list = names(iris)
list
ui <- fluidPage(
#TAB FIVE
tabItem(tabName = "Generalised Linear Model",
h2("Using Iris Data Set for Regression Model"),
fluidPage(
sidebarLayout(
sidebarPanel(
selectInput("outcome", label = h3("Outcome"),
choices = list, selected = 1),
selectInput("indepvar", label = h3("Explanatory variable"),
choices = list, selected = 1)
),
mainPanel(
tabsetPanel(type = "tabs",
tabPanel("Scatterplot", plotOutput("scatterplot")), # Plot
tabPanel("Distribution", # Plots of distributions
fluidRow(
column(6, plotOutput("distribution1")),
column(6, plotOutput("distribution2")))
),
tabPanel("Model Summary", verbatimTextOutput("summary")), # Regression output
tabPanel("Data", DT::dataTableOutput('tbl')) # Data as datatable
)
)
))
)
)
server <- function(input,output){
# Scatterplot output
output$scatterplot <- renderPlot({
plot(iris[,input$indepvar], iris[,input$outcome], main="Scatterplot",
xlab=input$indepvar, ylab=input$outcome, pch=19)
abline(lm(iris[,input$outcome] ~ iris[,input$indepvar]), col="red")
lines(lowess(iris[,input$indepvar],iris[,input$outcome]), col="blue")
}, height=400)
# Histogram output var 1
output$distribution1 <- renderPlot({
hist(iris[,input$outcome], main="", xlab=input$outcome)
}, height=300, width=300)
# Histogram output var 2
output$distribution2 <- renderPlot({
hist(iris[,input$indepvar], main="", xlab=input$indepvar)
}, height=300, width=300)
# Regression output
output$summary <- renderPrint({
fit <- lm(iris[,input$outcome] ~ iris[,input$indepvar])
names(fit$coefficients) <- c("Intercept", input$var2)
summary(fit)
})
# Data output
output$tbl = DT::renderDataTable({
DT::datatable(iris, options = list(lengthChange = FALSE))
})
}
shinyApp(ui=ui, server=server)
runApp('D:/Kunal/Assignments/Stats/CA1/example')
runApp('D:/Kunal/Assignments/Stats/CA1/example')
runApp('D:/Kunal/Assignments/Stats/CA1/GLM_1')
runApp('D:/Kunal/Assignments/Stats/CA1/GLM_1')
runApp('D:/Kunal/Assignments/Stats/CA1/GLM_1')
runApp('D:/Kunal/Assignments/Stats/CA1/GLM_1')
runApp('D:/Kunal/Assignments/Stats/CA1/example_1')
runApp('D:/Kunal/Assignments/Stats/CA1/GLM_1')
runApp('D:/Kunal/Assignments/Stats/CA1/GLM_1')
runApp('D:/Kunal/Assignments/Stats/CA1/GLM_1')
runApp('D:/Kunal/Assignments/Stats/CA1/GLM_1')
runApp('D:/Kunal/Assignments/Stats/CA1/example_1')
runApp('D:/Kunal/Assignments/Stats/CA1/GLM_1')
runApp('D:/Kunal/Assignments/Stats/CA1/GLM_1')
runApp('D:/Kunal/Assignments/Stats/CA1/GLM_1')
runApp('D:/Kunal/Assignments/Stats/CA1/example_1')
runApp('D:/Kunal/Assignments/Stats/CA1/example_1')
runApp('D:/Kunal/Assignments/Stats/CA1/GLM_1')
runApp('D:/Kunal/Assignments/Stats/CA1/GLM_1')
runApp('D:/Kunal/Assignments/Stats/CA1/GLM_1')
runApp('D:/Kunal/Assignments/Stats/CA1/GLM_1')
runApp('D:/Kunal/Assignments/Stats/CA1/GLM_1')
runApp('D:/Kunal/Assignments/Stats/CA1/GLM_1')
runApp('D:/Kunal/Assignments/Stats/CA1/GLM_1')
runApp('D:/Kunal/Assignments/Stats/CA1/GLM_1')
runApp('D:/Kunal/Assignments/Stats/CA1/GLM_1')
runApp('D:/Kunal/Assignments/Stats/CA1/GLM_1')
runApp('D:/Kunal/Assignments/Stats/CA1/GLM_1')
runApp('D:/Kunal/Assignments/Stats/CA1/GLM_1')
runApp('D:/Kunal/Assignments/Stats/CA1/GLM_1')
runApp('D:/Kunal/Assignments/Stats/CA1/GLM_1')
runApp('D:/Kunal/Assignments/Stats/CA1/GLM_1')
runApp('D:/Kunal/Assignments/Stats/CA1/GLM_1')
runApp('D:/Kunal/Assignments/Stats/CA1/GLM_1')
runApp('D:/Kunal/Assignments/Stats/CA1/GLM_1')
runApp('D:/Kunal/Assignments/Stats/CA1/GLM_1')
runApp('D:/Kunal/Assignments/Stats/CA1/GLM_1')
runApp('D:/Kunal/Assignments/Stats/CA1/GLM_1')
runApp('D:/Kunal/Assignments/Stats/CA1/GLM_1')
runApp('D:/Kunal/Assignments/Stats/CA1/GLM_1')
runApp('D:/Kunal/Assignments/Stats/CA1/GLM_1')
runApp('D:/Kunal/Assignments/Stats/CA1/GLM_1')
runApp('D:/Kunal/Assignments/Stats/CA1/GLM_1')
runApp('D:/Kunal/Assignments/Stats/CA1/GLM_1')
runApp('D:/Kunal/Assignments/Stats/CA1/GLM_1')
runApp('D:/Kunal/Assignments/Stats/CA1/GLM_1')
runApp('D:/Kunal/Assignments/Stats/CA1/GLM_1')
runApp('D:/Kunal/Assignments/Stats/CA1/GLM_1')
runApp('D:/Kunal/Assignments/Stats/CA1/GLM_1')
runApp('D:/Kunal/Assignments/Stats/CA1/GLM_1')
runApp('D:/Kunal/Assignments/Stats/CA1/GLM_1')
runApp('D:/Kunal/Assignments/Stats/CA1/GLM_1')
runApp('D:/Kunal/Assignments/Stats/CA1/GLM_1')
runApp('D:/Kunal/Assignments/Stats/CA1/GLM_1')
runApp('D:/Kunal/Assignments/Stats/CA1/GLM_1')
runApp('D:/Kunal/Assignments/Stats/CA1/GLM_1')
runApp('D:/Kunal/Assignments/Stats/CA1/GLM_1')
runApp('D:/Kunal/Assignments/Stats/CA1/GLM_1')
runApp('D:/Kunal/Assignments/Stats/CA1/GLM_1')
runApp('D:/Kunal/Assignments/Stats/CA1/GLM_1')
runApp('D:/Kunal/Assignments/Stats/CA1/GLM_1')
runApp('D:/Kunal/Assignments/Stats/CA1/GLM_1')
shiny::runApp('D:/Kunal/Assignments/Stats/CA1/GLM_1')
runApp('D:/Kunal/Assignments/Stats/CA1/GLM_1')
shiny::runApp('D:/Kunal/Assignments/Stats/CA1/GLM_1')
runApp('D:/Kunal/Assignments/Stats/CA1/GLM_1')
runApp('D:/Kunal/Assignments/Stats/CA1/GLM_1')
runApp('D:/Kunal/Assignments/Stats/CA1/GLM_1')
runApp('D:/Kunal/Assignments/Stats/CA1/GLM_1')
runApp('D:/Kunal/Assignments/Stats/CA1/GLM_1')
runApp('D:/Kunal/Assignments/Stats/CA1/GLM_1')
runApp('D:/Kunal/Assignments/Stats/CA1/GLM_1')
runApp('D:/Kunal/Assignments/Stats/CA1/example_1')
runApp('D:/Kunal/Assignments/Stats/CA1/GLM_1')
runApp('D:/Kunal/Assignments/Stats/CA1/GLM_1')
runApp('D:/Kunal/Assignments/Stats/CA1/GLM_1')
runApp('D:/Kunal/Assignments/Stats/CA1/GLM_1')
runApp('D:/Kunal/Assignments/Stats/CA1/example_1')
runApp('D:/Kunal/Assignments/Stats/CA1/GLM_1')
runApp('D:/Kunal/Assignments/Stats/CA1/GLM_12')
runApp()
runApp()
runApp('D:/Kunal/Assignments/Stats/CA1/GLM_12')
runApp('D:/Kunal/Assignments/Stats/CA1/GLM_12')
runApp('D:/Kunal/Assignments/Stats/CA1/GLM_12')
runApp('D:/Kunal/Assignments/Stats/CA1/GLM_12')
runApp('D:/Kunal/Assignments/Stats/CA1/GLM_12')
runApp('D:/Kunal/Assignments/Stats/CA1/GLM_12')
runApp('D:/Kunal/Assignments/Stats/CA1/GLM_12')
runApp('D:/Kunal/Assignments/Stats/CA1/GLM_12')
runApp('D:/Kunal/Assignments/Stats/CA1/GLM_12')
runApp('D:/Kunal/Assignments/Stats/CA1/GLM_12')
runApp('D:/Kunal/Assignments/Stats/CA1/GLM_12')
runApp('D:/Kunal/Assignments/Stats/CA1/GLM_12')
runApp('D:/Kunal/Assignments/Stats/CA1/GLM_12')
runApp('D:/Kunal/Assignments/Stats/CA1/GLM_12')
runApp('D:/Kunal/Assignments/Stats/CA1/GLM_12')
runApp('D:/Kunal/Assignments/Stats/CA1/GLM_12')
runApp('D:/Kunal/Assignments/Stats/CA1/GLM_12')
runApp('D:/Kunal/Assignments/Stats/CA1/GLM_12')
runApp()
runApp('D:/Kunal/Assignments/Stats/CA1/GLM_12')
runApp('D:/Kunal/Assignments/Stats/CA1/GLM_12')
runApp('D:/Kunal/Assignments/Stats/CA1/GLM_12')
runApp('D:/Kunal/Assignments/Stats/CA1/GLM_12')
runApp('D:/Kunal/Assignments/Stats/CA1/GLM_12')
shiny::runApp('D:/Kunal/Assignments/Stats/CA1/GLM_12')
runApp('D:/Kunal/Assignments/Stats/CA1/GLM_12')
runApp('D:/Kunal/Assignments/Stats/CA1/GLM_12')
runApp('D:/Kunal/Assignments/Stats/CA1/GLM_12')
runApp('D:/Kunal/Assignments/Stats/CA1/GLM_12')
runApp('D:/Kunal/Assignments/Stats/CA1/GLM_1/app_final.R')
runApp('D:/Kunal/Assignments/Stats/CA1/GLM_12')
runApp('D:/Kunal/Assignments/Stats/CA1/GLM_12')
runApp('D:/Kunal/Assignments/Stats/CA1/GLM_12')
runApp('D:/Kunal/Assignments/Stats/CA1/GLM_12')
runApp('D:/Kunal/Assignments/Stats/CA1/GLM_12')
runApp('D:/Kunal/Assignments/Stats/CA1/GLM_12')
runApp('D:/Kunal/Assignments/Stats/CA1/GLM_12')
runApp('D:/Kunal/Assignments/Stats/CA1/GLM_12')
runApp('D:/Kunal/Assignments/Stats/CA1/GLM_12')
runApp('D:/Kunal/Assignments/Stats/CA1/GLM_12')
runApp('D:/Kunal/Assignments/Stats/CA1/GLM_12')
install.packages('rsconnect')
shiny::runApp('D:/Kunal/Assignments/Stats/CA1/GLM_12')
runApp()
runApp('D:/Kunal/Assignments/Stats/CA1/GLM_12')
runApp()
runApp('D:/Kunal/Assignments/Stats/CA1/GLM_12')
runApp('D:/Kunal/Assignments/Stats/CA1/GLM_12')
runApp('D:/Kunal/Assignments/Stats/CA1/GLM_12')
runApp('D:/Kunal/Assignments/Stats/CA1/GLM_12')
runApp('D:/Kunal/Assignments/Stats/CA1/GLM_12')
runApp('D:/Kunal/Assignments/Stats/CA1/GLM_12')
runApp('D:/Kunal/Assignments/Stats/CA1/GLM_12')
runApp('D:/Kunal/Assignments/Stats/CA1/GLM_12')
runApp('D:/Kunal/Assignments/Stats/CA1/GLM_12')
runApp('D:/Kunal/Assignments/Stats/CA1/GLM_12')
runApp('D:/Kunal/Assignments/Stats/CA1/GLM_12')
runApp('D:/Kunal/Assignments/Stats/CA1/GLM_12')
runApp('D:/Kunal/Assignments/Stats/CA1/GLM_12')
runApp('D:/Kunal/Assignments/Stats/CA1/GLM_12')
runApp('D:/Kunal/Assignments/Stats/CA1/GLM_12')
runApp('D:/Kunal/Assignments/Stats/CA1/GLM_12')
runApp('D:/Kunal/Assignments/Stats/CA1/GLM_12')
install.packages("flexdashboard")
ui<-navbarPage("Statistics Data Analytics App ",
)
runApp('D:/Kunal/Assignments/Stats/CA1/Stats_CA1/CA1_Stats_Analytics_App')
getwd()
setwd("D:/Kunal/Assignments/Stats/CA1/Stats_CA1/CA1_Stats_Analytics_App/")
getwd()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("shinythemes")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('C:/Users/kunal/Downloads/stats_ca1/stats_ca1')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
